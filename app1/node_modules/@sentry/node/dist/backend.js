"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@sentry/core");
var hub_1 = require("@sentry/hub");
var types_1 = require("@sentry/types");
var is_1 = require("@sentry/utils/is");
var object_1 = require("@sentry/utils/object");
var md5 = require("md5");
var parsers_1 = require("./parsers");
var transports_1 = require("./transports");
/** The Sentry Node SDK Backend. */
var NodeBackend = /** @class */ (function (_super) {
    __extends(NodeBackend, _super);
    function NodeBackend() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @inheritDoc
     */
    NodeBackend.prototype.eventFromException = function (exception, hint) {
        return __awaiter(this, void 0, void 0, function () {
            var ex, keys_1, message, event;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ex = exception;
                        if (!is_1.isError(exception)) {
                            if (is_1.isPlainObject(exception)) {
                                keys_1 = Object.keys(exception).sort();
                                message = "Non-Error exception captured with keys: " + object_1.serializeKeysToEventMessage(keys_1);
                                hub_1.getCurrentHub().configureScope(function (scope) {
                                    scope.setExtra('__serialized__', object_1.limitObjectDepthToSize(exception));
                                    scope.setFingerprint([md5(keys_1.join(''))]);
                                });
                                ex = (hint && hint.syntheticException) || new Error(message);
                                ex.message = message;
                            }
                            else {
                                // This handles when someone does: `throw "something awesome";`
                                // We use synthesized Error here so we can extract a (rough) stack trace.
                                ex = (hint && hint.syntheticException) || new Error(exception);
                            }
                        }
                        return [4 /*yield*/, parsers_1.parseError(ex)];
                    case 1:
                        event = _a.sent();
                        return [2 /*return*/, __assign({}, event, { event_id: hint && hint.event_id })];
                }
            });
        });
    };
    /**
     * @inheritDoc
     */
    NodeBackend.prototype.eventFromMessage = function (message, level, hint) {
        if (level === void 0) { level = types_1.Severity.Info; }
        return __awaiter(this, void 0, void 0, function () {
            var event, stack, _a, frames_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        event = {
                            event_id: hint && hint.event_id,
                            fingerprint: [message],
                            level: level,
                            message: message,
                        };
                        if (!(this.options.attachStacktrace && hint && hint.syntheticException)) return [3 /*break*/, 5];
                        if (!hint.syntheticException) return [3 /*break*/, 2];
                        return [4 /*yield*/, parsers_1.extractStackFromError(hint.syntheticException)];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _a = [];
                        _b.label = 3;
                    case 3:
                        stack = _a;
                        return [4 /*yield*/, parsers_1.parseStack(stack)];
                    case 4:
                        frames_1 = _b.sent();
                        event.stacktrace = {
                            frames: parsers_1.prepareFramesForEvent(frames_1),
                        };
                        _b.label = 5;
                    case 5: return [2 /*return*/, event];
                }
            });
        });
    };
    /**
     * @inheritDoc
     */
    NodeBackend.prototype.sendEvent = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var dsn, transportOptions;
            return __generator(this, function (_a) {
                if (!this.options.dsn) {
                    throw new core_1.SentryError('Cannot sendEvent without a valid DSN');
                }
                else {
                    dsn = new core_1.Dsn(this.options.dsn);
                }
                if (!this.transport) {
                    transportOptions = this.options.transportOptions ? this.options.transportOptions : { dsn: dsn };
                    this.transport = this.options.transport
                        ? new this.options.transport({ dsn: dsn })
                        : dsn.protocol === 'http'
                            ? new transports_1.HTTPTransport(transportOptions)
                            : new transports_1.HTTPSTransport(transportOptions);
                }
                return [2 /*return*/, this.transport.captureEvent(event)];
            });
        });
    };
    return NodeBackend;
}(core_1.BaseBackend));
exports.NodeBackend = NodeBackend;
//# sourceMappingURL=backend.js.map