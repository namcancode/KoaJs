{"version":3,"file":"linkederrors.js","sourceRoot":"","sources":["../../src/integrations/linkederrors.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,8BAAuC;AACvC,sCAAmD;AAEnD,IAAM,WAAW,GAAG,OAAO,CAAC;AAC5B,IAAM,aAAa,GAAG,CAAC,CAAC;AASxB,iCAAiC;AACjC;IAgBE;;OAEG;IACH,sBAAmB,OAA8C;QAA9C,wBAAA,EAAA,YAA8C;QAlBjE;;WAEG;QACa,SAAI,GAAW,cAAc,CAAC;QAgB5C,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,IAAI,WAAW,CAAC;QACtC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,aAAa,CAAC;IAC9C,CAAC;IAED;;OAEG;IACI,8BAAO,GAAd;QAAA,iBAIC;QAHC,mBAAa,EAAE,CAAC,cAAc,CAAC,UAAA,KAAK;YAClC,KAAK,CAAC,iBAAiB,CAAC,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACU,8BAAO,GAApB,UAAqB,KAAkB,EAAE,IAAsB;;;;;;wBAC7D,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,iBAAiB,YAAY,KAAK,CAAC,EAAE;4BACtG,sBAAO,KAAK,EAAC;yBACd;wBACoB,qBAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,GAAG,CAAC,EAAA;;wBAAzE,YAAY,GAAG,SAA0D;wBAC/E,KAAK,CAAC,SAAS,CAAC,MAAM,YAAO,KAAK,CAAC,SAAS,CAAC,MAAM,EAAK,YAAY,CAAC,CAAC;wBACtE,sBAAO,KAAK,EAAC;;;;KACd;IAED;;OAEG;IACU,oCAAa,GAA1B,UACE,KAAoB,EACpB,GAAW,EACX,KAA6B;QAA7B,sBAAA,EAAA,UAA6B;;;;;;wBAE7B,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,KAAK,EAAE;4BAChE,sBAAO,KAAK,EAAC;yBACd;wBACiB,qBAAM,+BAAqB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAA;;wBAAnD,SAAS,GAAG,SAAuC;wBACzD,sBAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,GAAG,WAAM,KAAK,GAAE,SAAS,GAAE,EAAC;;;;KACnE;IACH,mBAAC;AAAD,CAAC,AA3DD,IA2DC;AA3DY,oCAAY","sourcesContent":["import { Integration, SentryEvent, SentryEventHint, SentryException } from '@sentry/types';\nimport { getCurrentHub } from '../hub';\nimport { getExceptionFromError } from '../parsers';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\n/**\n * Just an Error object with arbitrary attributes attached to it.\n */\ninterface ExtendedError extends Error {\n  [key: string]: any;\n}\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  private readonly key: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly limit: number;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { key?: string; limit?: number } = {}) {\n    this.key = options.key || DEFAULT_KEY;\n    this.limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public install(): void {\n    getCurrentHub().configureScope(scope => {\n      scope.addEventProcessor(this.handler.bind(this));\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async handler(event: SentryEvent, hint?: SentryEventHint): Promise<SentryEvent | null> {\n    if (!event.exception || !event.exception.values || !hint || !(hint.originalException instanceof Error)) {\n      return event;\n    }\n    const linkedErrors = await this.walkErrorTree(hint.originalException, this.key);\n    event.exception.values = [...event.exception.values, ...linkedErrors];\n    return event;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async walkErrorTree(\n    error: ExtendedError,\n    key: string,\n    stack: SentryException[] = [],\n  ): Promise<SentryException[]> {\n    if (!(error[key] instanceof Error) || stack.length >= this.limit) {\n      return stack;\n    }\n    const exception = await getExceptionFromError(error[key]);\n    return this.walkErrorTree(error[key], key, [...stack, exception]);\n  }\n}\n"]}