{"version":3,"file":"onunhandledrejection.js","sourceRoot":"","sources":["../../src/integrations/onunhandledrejection.ts"],"names":[],"mappings":";;AACA,8BAAuC;AAEvC,uCAAuC;AACvC;IAAA;QACE;;WAEG;QACI,SAAI,GAAW,sBAAsB,CAAC;IAoC/C,CAAC;IAnCC;;OAEG;IACI,sCAAO,GAAd;QACE,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,oBAAoB,EAAE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAChF,CAAC;IAED;;;;OAIG;IACI,mDAAoB,GAA3B,UAA4B,MAAW,EAAE,OAAY;QACnD,IAAM,OAAO,GAAG,CAAC,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;QACvE,mBAAa,EAAE,CAAC,SAAS,CAAC;YACxB,mBAAa,EAAE,CAAC,cAAc,CAAC,UAAA,KAAK;gBAClC,2DAA2D;gBAC3D,IAAI,OAAO,CAAC,IAAI,EAAE;oBAChB,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBAC7B;gBACD,IAAI,OAAO,CAAC,IAAI,EAAE;oBAChB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;wBACnC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;oBACvC,CAAC,CAAC,CAAC;iBACJ;gBACD,IAAI,OAAO,CAAC,KAAK,EAAE;oBACjB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;wBACpC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;oBAC1C,CAAC,CAAC,CAAC;iBACJ;gBACD,KAAK,CAAC,QAAQ,CAAC,2BAA2B,EAAE,IAAI,CAAC,CAAC;YACpD,CAAC,CAAC,CAAC;YACH,mBAAa,EAAE,CAAC,gBAAgB,CAAC,MAAM,EAAE,EAAE,iBAAiB,EAAE,OAAO,EAAE,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;IACL,CAAC;IACH,2BAAC;AAAD,CAAC,AAxCD,IAwCC;AAxCY,oDAAoB","sourcesContent":["import { Integration } from '@sentry/types';\nimport { getCurrentHub } from '../hub';\n\n/** Global Promise Rejection handler */\nexport class OnUnhandledRejection implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = 'OnUnhandledRejection';\n  /**\n   * @inheritDoc\n   */\n  public install(): void {\n    global.process.on('unhandledRejection', this.sendUnhandledPromise.bind(this));\n  }\n\n  /**\n   * Send an exception with reason\n   * @param reason string\n   * @param promise promise\n   */\n  public sendUnhandledPromise(reason: any, promise: any): void {\n    const context = (promise.domain && promise.domain.sentryContext) || {};\n    getCurrentHub().withScope(() => {\n      getCurrentHub().configureScope(scope => {\n        // Preserve backwards compatibility with raven-node for now\n        if (context.user) {\n          scope.setUser(context.user);\n        }\n        if (context.tags) {\n          Object.keys(context.tags).forEach(key => {\n            scope.setTag(key, context.tags[key]);\n          });\n        }\n        if (context.extra) {\n          Object.keys(context.extra).forEach(key => {\n            scope.setExtra(key, context.extra[key]);\n          });\n        }\n        scope.setExtra('unhandledPromiseRejection', true);\n      });\n      getCurrentHub().captureException(reason, { originalException: promise });\n    });\n  }\n}\n"]}