{"version":3,"file":"base.js","sourceRoot":"","sources":["../../src/transports/base.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAgD;AAChD,uCAAiG;AACjG,+CAAiD;AAIjD,sCAAmD;AAUnD,0CAA0C;AAC1C;IAOE,uCAAuC;IACvC,uBAA0B,OAAyB;QAAzB,YAAO,GAAP,OAAO,CAAkB;QACjD,IAAI,CAAC,GAAG,GAAG,IAAI,UAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAClC,CAAC;IAED,4DAA4D;IAClD,yCAAiB,GAA3B;QACE,IAAM,OAAO,gBACR,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,kBAAQ,EAAE,qBAAW,CAAC,EACjD,IAAI,CAAC,OAAO,CAAC,OAAO,CACxB,CAAC;QAEF,OAAO;YACL,KAAK,EAAE,IAAI,CAAC,MAAM;YAClB,OAAO,SAAA;YACP,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI;YAChC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,oBAAoB,EAAE;YACrC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI;SAC7B,CAAC;IACJ,CAAC;IAED,YAAY;IACI,sCAAc,GAA9B,UAA+B,UAAuB,EAAE,KAAkB;;;;gBAClE,cAAc,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBAChD,sBAAO,IAAI,OAAO,CAAiB,UAAC,OAAO,EAAE,MAAM;wBACjD,IAAM,GAAG,GAAG,UAAU,CAAC,OAAO,CAAC,cAAc,EAAE,UAAC,GAAyB;4BACvE,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;4BACxB,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,IAAI,GAAG,CAAC,UAAU,GAAG,GAAG,EAAE;gCACnE,OAAO,CAAC;oCACN,MAAM,EAAE,cAAM,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC;iCAC5C,CAAC,CAAC;6BACJ;iCAAM;gCACL,IAAI,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;oCAChD,IAAM,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;oCAC7C,MAAM,CAAC,IAAI,kBAAW,CAAC,iBAAe,GAAG,CAAC,UAAU,WAAM,MAAQ,CAAC,CAAC,CAAC;iCACtE;qCAAM;oCACL,MAAM,CAAC,IAAI,kBAAW,CAAC,iBAAe,GAAG,CAAC,UAAU,MAAG,CAAC,CAAC,CAAC;iCAC3D;6BACF;4BACD,4BAA4B;4BAC5B,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE;gCACb,QAAQ;4BACV,CAAC,CAAC,CAAC;4BACH,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE;gCACZ,QAAQ;4BACV,CAAC,CAAC,CAAC;wBACL,CAAC,CAAC,CAAC;wBACH,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;wBACxB,GAAG,CAAC,GAAG,CAAC,kBAAS,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC5B,CAAC,CAAC,EAAC;;;KACJ;IAED;;OAEG;IACU,oCAAY,GAAzB,UAA0B,CAAc;;;gBACtC,MAAM,IAAI,kBAAW,CAAC,wDAAwD,CAAC,CAAC;;;KACjF;IACH,oBAAC;AAAD,CAAC,AAlED,IAkEC;AAlEqB,sCAAa","sourcesContent":["import { API, SentryError } from '@sentry/core';\nimport { SentryEvent, SentryResponse, Status, Transport, TransportOptions } from '@sentry/types';\nimport { serialize } from '@sentry/utils/object';\nimport * as http from 'http';\nimport * as https from 'https';\nimport * as url from 'url';\nimport { SDK_NAME, SDK_VERSION } from '../version';\n\n/** Internal used interface for typescript */\nexport interface HTTPRequest {\n  request(\n    options: http.RequestOptions | https.RequestOptions | string | url.URL,\n    callback?: (res: http.IncomingMessage) => void,\n  ): http.ClientRequest;\n}\n\n/** Base Transport class implementation */\nexport abstract class BaseTransport implements Transport {\n  /** API object */\n  protected api: API;\n\n  /** The Agent used for corresponding transport */\n  protected client: http.Agent | https.Agent | undefined;\n\n  /** Create instance and set this.dsn */\n  public constructor(public options: TransportOptions) {\n    this.api = new API(options.dsn);\n  }\n\n  /** Returns a build request option object used by request */\n  protected getRequestOptions(): http.RequestOptions | https.RequestOptions {\n    const headers = {\n      ...this.api.getRequestHeaders(SDK_NAME, SDK_VERSION),\n      ...this.options.headers,\n    };\n\n    return {\n      agent: this.client,\n      headers,\n      hostname: this.api.getDsn().host,\n      method: 'POST',\n      path: this.api.getStoreEndpointPath(),\n      port: this.api.getDsn().port,\n    };\n  }\n\n  /** JSDoc */\n  protected async sendWithModule(httpModule: HTTPRequest, event: SentryEvent): Promise<SentryResponse> {\n    const requestOptions = this.getRequestOptions();\n    return new Promise<SentryResponse>((resolve, reject) => {\n      const req = httpModule.request(requestOptions, (res: http.IncomingMessage) => {\n        res.setEncoding('utf8');\n        if (res.statusCode && res.statusCode >= 200 && res.statusCode < 300) {\n          resolve({\n            status: Status.fromHttpCode(res.statusCode),\n          });\n        } else {\n          if (res.headers && res.headers['x-sentry-error']) {\n            const reason = res.headers['x-sentry-error'];\n            reject(new SentryError(`HTTP Error (${res.statusCode}): ${reason}`));\n          } else {\n            reject(new SentryError(`HTTP Error (${res.statusCode})`));\n          }\n        }\n        // force the socket to drain\n        res.on('data', () => {\n          // Drain\n        });\n        res.on('end', () => {\n          // Drain\n        });\n      });\n      req.on('error', reject);\n      req.end(serialize(event));\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async captureEvent(_: SentryEvent): Promise<SentryResponse> {\n    throw new SentryError('Transport Class has to implement `captureEvent` method');\n  }\n}\n"]}